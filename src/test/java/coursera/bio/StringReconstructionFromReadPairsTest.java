package coursera.bio;

import static coursera.bio.StringReconstructionFromReadPairs.assemble;
import static org.junit.Assert.*;
import java.util.Arrays;
import java.util.List;

import org.junit.Test;

public class StringReconstructionFromReadPairsTest {

	@Test
	public void assemble() {
		List<String> pairs = Arrays.asList("GAGA|TTGA", "TCGT|GATG",
				"CGTG|ATGT", "TGGT|TGAG", "GTGA|TGTT", "GTGG|GTGA",
				"TGAG|GTTG", "GGTC|GAGA", "GTCG|AGAT");
		assertEquals("GTGGTCGTGAGATGTTGA", assemble.apply(4, 2, pairs));
	}

	@Test
	public void assembleMore() {
		List<String> pairs = Arrays.asList("TAA|GCC", "AAT|CCA", "ATG|CAT",
				"TGC|ATG", "GCC|TGG", "CCA|GGG", "CAT|GGA", "ATG|GAT",
				"TGG|ATG", "GGG|TGT", "GGA|GTT");
		assertEquals("TAATGCCATGGGATGTT", assemble.apply(3, 1, pairs));
	}

	@Test
	public void assembleExtraData() throws Exception {
		List<String> lines = FileUtil
				.loadFile("StringReconstructionFromReadPairs.txt");
		String[] numbers = lines.get(1).split(" ");
		Integer k = Integer.parseInt(numbers[0]);
		Integer d = Integer.parseInt(numbers[1]);
		List<String> pairs = lines.subList(2, lines.size() - 2);
		String expected = lines.get(lines.size() - 1);
		assertEquals(expected, assemble.apply(k, d, pairs));
	}

	@Test
	public void assembleDataset() throws Exception {
		List<String> lines = FileUtil.loadFile("dataset_204_14.txt");
		String[] numbers = lines.get(0).split(" ");
		Integer k = Integer.parseInt(numbers[0]);
		Integer d = Integer.parseInt(numbers[1]);
		List<String> pairs = lines.subList(1, lines.size());
		String expected = "TGAGCATGGTCCCTACAGGGGCTCTACATTCCTATCCACATGTAAGCTCCGCTGAAAAACATGAGCCACATACTTGACGAGGGACTGTGCGCACGAAGCGTGGCCTCCTCACGGCGGGGCAATTCTTCTCTGTAATTGGCTAGGGAACAGTGGCTCGAGGGCACCGGCATTTGGACCGTCGAGTCGGTCTTGATATCAGTAGAAATAAGAGCCGGTGTTTGGAATCCAGACATGCCATCTACCATGCCATTAGTAGTTCGGGTCTGGGATTAGTAAAGTCGGGAGATGCCCTGGTGAGATAGGGAAAGCGTGTCTGTCCTGTAGGTGATTGCTCGCTCTGGCGGGTTCAGCGCTAATAAGGTCTGGGTACGGCTTTTGAACAAAAGATATACTATCAGTTTGGTCGACTCCCCTAGCAATAACTAGTGACGGCGAAGCCGTCGGCTCATATTGAGTTAGCGCCTGGGCGGTTCACTGAGGGTTGTCTGGGCATCTGTTGAAACCATTCATCACGTCCAATTCTGTAGATCAACGTTGTGCACAATTCTGATTACTGCCCTCAGTTTTTAAAATCTCAAATCAGAAGAATAGTTTCTGGCTCAGCTAAGTGATATAAGCGGTCAGCAGTTTACAGATCAGGACATCTTCTGACCTGTTGGAAAGCCGTCAGTAGGTCCAAAAGCGATTGGTTGAGATTCAAATAGTAAGGTCTGGGTACGGCTTTTGAACAAAAGATATACTATCAGTTTGGTCGCCGAATTCACAACCGTAGACTGATGGGGAATCGAAAAGCCATTTGCAGCCAATTCTATTAGGAACCATCATTCACAATTCGGCGTGGGCTTGATTATCGACCAAATAGAGGAAGCAACACAGTGTAGCAATTGCTGTTTCAACGAATTATTTGACTCCCGTCGGATAATCTATGTTCCGCGAGACCGCCATTGAGATGCCTAAAACATGCAGGCATAATCGCCAGCTGCTAGCGGGTCGAGGCATATAAGGTCTGGGTACGGCTTTTGAACAAAAGATATACTATCAGTTTGGTCGCCTGAGGTTATTTCGACTTCCAGACTCGGCTGACGTTAAACAATCACGAGGCGATATTGTTTCTTTATGTGCAGCTTGGGATTAAGTCCCAGTCCGCGCGCAAGAAACAAAGCATCCGCATGGCAGGAGCTTTTCCGCTAAGGTCTGGGTACGGCTTTTGAACAAAAGATATACTATCAGTTTGGTCGAGCCCGTTGAGCGGATAGTAACGTTGCTCAACTTTGCAGCTCCTTGCGAAAAGATAGTGTTTAATTGGATAAGCCTACTCACACGAGGAAATTATGCCGCCGGCCGATAGTGGGCCCACCCGAAGAAGCACTGGGGAAGGAGGACCTAACTCAGTCATTAGTAGGGCAACCATACTATAAGGTCTGGGTACGGCTTTTGAACAAAAGATATACTATCAGTTTGGTCGACACGACATTTGTTCCTTACCCTTCGGAGGGCGCCTACTCGGGAGTATATCCATACTCACGACGATGGACGCATCTCACAATCACGCTGCCGCACCTGCAAGGCAGCGTAGGCGGCAGAAAGGGGGCGTTCGCCATATTAAGGTCTGGGTACGGCTTTTGAACAAAAGATATACTATCAGTTTGGTCGGGCAGGTAAAGGTGGATTTTAAGGTCTGGGTACGGCTTTTGAACAAAAGATATACTATCAGTTTGGTCGACATCGGTCGGCCTAAGGTCTGGGTACGGCTTTTGAACAAAAGATATACTATCAGTTTGGTCGAACTAAGGTCTGGGTACGGCTTTTGAACAAAAGATATACTATCAGTTTGGTCGTAGATCGGCTTGAATGAAAAATTTACTACGCAGTGCGCTGGGTATGTGTAAGCAATACTTCTCGTAGGTGTCTCCTAAGGTCTGGGTACGGCTTTTGAACAAAAGATATACTATCAGTTTGGTCGGGTCCCTGTTTTTGGTGCTATAGGATGTCCTACTTTTTTTGGGGGACTAATCCGTACACACCGTGTAGGAATTTGAGTGAGGACAACGTTCGCAGACAACGCCTCTTCATAAATTAAGACGCTAATGGTTTAAATAGTTGTGCCTCCCTTGAGGGCGGCACGGCCGTCGGCGAGTCCTCAGCGTCGAGGGTATAGTGAAGACCACCAACCCATCTGGAGCCTTACGTCATAAGCGGCGCTGGCATTGCTCTGCGCGGTCGTTCGATTCGAGAACCGATCAGGTCAGATGCTACATACGAAAGTGTCTACTGTAATCTTAGTGGGATTCCTGACATCCGAGGGGTTTGACACCCCCGGACTAATGACTACGCGTTCTGGAGGGTAAGATGATAGGAAACGTGTTTACAGTGTGACAAGACTGGTTAAGGTCTGGGTACGGCTTTTGAACAAAAGATATACTATCAGTTTGGTCGGCTTGGTCGCTTTGCAGCAGCTGAAAGACAGAAAAAATGATATATGACTTCGTCCCTGCTCCCTAGAGACTCCACTTCTGTGAGGCTGGATCGTTCGAGATTGGTCCTTTACTCTTGAGGAGCACGCTTGTCTTAGCGTCCAGCAAAGATGTCGTTGTAGATACATAGTTATCACGTGTTTAACGAGTAACAAGGATTGCGCCTGGGTAATACCGCCTGGGGGGGGAGAGGCTCGTTTGTAAGGTCTGGGTACGGCTTTTGAACAAAAGATATACTATCAGTTTGGTCGAATAACAGAGACTACCGCAGATTTCAACCGTATAAGGTCTGGGTACGGCTTTTGAACAAAAGATATACTATCAGTTTGGTCGTGGGAACTACATACGCGTTACCAACGGCGAGACTTATAGGATCAGGCTTGATACTACGCGTCACCATCAAGGCGTTAAGGTCTGGGTACGGCTTTTGAACAAAAGATATACTATCAGTTTGGTCGTAATAGGTATGTTCACTGACTAGTGAGATCTCCAACTGTAGACACCGTATGTTTGTAGCTGTCCATATCTCATTTAAGACTGGATTCCCATCAGTGCTGAGAGCATTGACCGACTATGCTCCGCGGACCACTGCGCCTTGGAGCGGCTCAAGTGCCGTGTGATCATTTGTACATCCAACTAGCATGAAGCCGTCAACCTCCATAGTTCGAATCTGCAGAAAAGCTTTTTTCCACATCAAGGCACTCCTTGATGCCGTGTTCACTCCTACCATAGTGCCCATTAGCACCGCTTCGCCGGAGAGACAATTTACGTCGTCTTGGACATGGGAAAGATGCGAGGTTTCACACTATTCAATACATGTCCATACCATGAACCCGTTGCGAACGCCTGTCGCAATCCATCAATCACCCACAAGGGATGGGTCAGATACCAAATAGAATGCGACATCCTCTTGTGTGCGGCCGGGCGAGCAAGGTCTAGCAACGGTTGGGAAAGACGGAATCTCCTGCGCCATCCCCTAGAAATCTACCATGAGCTTCGCAGTTAGCACATGCGTAATCTCTTCCAAGCAACTTACCAGCGGATAGTCGCAGATTTTTTACTTCGCTCCTCCCCGCAGAGATGTAAGGTCTGGGTACGGCTTTTGAACAAAAGATATACTATCAGTTTGGTCGTAAAATGGTACACATCGGAAGGTCGGATGATGGATGTTAAGGTCTGGGTACGGCTTTTGAACAAAAGATATACTATCAGTTTGGTCGGAGCAGTACTGTGATCGACCGTAGTCCCACTTCTTCGGCCACGCGGTCAGGGGCGACCCCATGAGTCTATTGGCTTCGCTTGGACATAGACTTGGTAGCTGAACACGACATGGAGCCCACGCAAACTCAGACCTCCGGAGACTCAAGTGAAAAACTTTGTAGCATGCCTGCGGTAAAGTCCTTAACGCAGTCCGACGGGCACAAGTAACCTAAGGTCTGGGTACGGCTTTTGAACAAAAGATATACTATCAGTTTGGTCGATAGACACTCTCTATAAAGATAGTTAAGGCGTGTCAGGCAATCGCTCTAGAGTTTTCGATATACCACGGGATCCCGCGCAACATTATCCCGACTAATATGGGGGCGCTGCGACAGTGGCGGCTAGCATCGCCGGGCACGAGCATTGATACGAGACCCCTAGCTGCGCTACTGTGTCGTACCACTACTCACGAATTGAAGTTAACTGATCTAGAGTAGCAAAGTCACGTCACTCGGAAGAGTGTCTGTGGCTACTACCGGCGCCGTAGAGCTTCTGTGCACTACACCGCTGAACGACCAGCTTTCTATGTATGCAGATTCTAGCTTCTTCGGGAGTGACCTCCCTAAAGGAAATAAGGTCTGGGTACGGCTTTTGAACAAAAGATATACTATCAGTTTGGTCGGATGGTGACCTTTGAGCAGGTTCTGCTCTGGTGACCTGATCAGATTAAATCAGGCCTGATAGGTCTCCCCAAAAAACAGTAAGTATCTTTAATGAAGGCACCGCGTTCCTTCCGGGGGGGATGAGTCCATGCCATTTGTAGATACAGAGGAGTTAACTGCTTTGTGCTACAGATCGCATAGATATCGCGCATCAAGCACTGCGGCTCGTGATGGAACTTGCCCGCTTGCGTCCTGGGGACGTAAGGTCTGGGTACGGCTTTTGAACAAAAGATATACTATCAGTTTGGTCGCCCTTCAACTAGGCCGAAACTGGGGATCTTTTTAAACAGATGTATCAGTTCTTGTCGCTTTCTAGAAAAGTGCGCTCCGTATAAGTCTCCTACAATCTGCTTGATCCGCGAGTTTAGGCAGTCGAATCATTCATGGGTTCTCCGCGTTCGTTAGCTGCTCGTTGATTGGGATTACAGATAGGATACGGTCCGACTCCTATGAATGTCGGAGATACTGTGTGCGATACAGCTAGTGTGTTGTCTGGCAGTTGACGTCTACGGAAGACTAATAGCCAGCCAGACGCCTCGAATCGAGTCTCGCAGAGTAACCCCGCTAGGCGGGCTCCGCCTTAGCAGGTTATTCGAGGGACTCAAACAGCAATCGAGTAATTAACTTGCCTGGCCGGGCGTGCACGCACTCCTGAGACAGAATGTCAGGAAGAGACTAGCTAGTGGATGACTACCTCTTCGGCATGTCAGGTCGCACTAGATGACCCGATAAATCCGCCCACGCTGTGAATGAGGGCGGATACTAAAGTGCTCGGCGGGTTCACTCAAGGACCCTTTGAACTCAATTCAGAGACCTACATCGGGGCCTAAGGTCTGGGTACGGCTTTTGAACAAAAGATATACTATCAGTTTGGTCGCGGCATGGCCGTTCGAGTATCATGACATGCAGTGCGGGTCCTCCTTGACCGGGCCTTTGTGATTGTATCTATTCGCCCGATGTCACGCCACTCGGGTTTATCCGCGTATTTCGATTCAGCCTATGATAGGGATCTCACAAATCTCCCGACAATCGCGCGTCCCAATGGCTCATTGAGCGCGCCGGCGTGCCAATCGCGTCTGAGAGATTAGGCACAGTGATAGCTGGAATTAAGTGGATGCATTAGCTTGTCGGACGGTATTCTACAGTTCTAGCAGATTCTTGACGCGGAGGTTAGCCGGACTTGAGGGACCAATGAAAGGTCACTAAAAACTAAATCTGAAATGAGAGAAGACAAGATCTAATCATTAAGACCGAAACATCTCAGGCATACGGTCTATTGCACAGTCCAGTCCCTTAAATGGCATCTTCGGTCATACAATCATTCGCTACGCTGCCTTGGATTATTGTACAGACTAGTTTAGAAGACGGTCTGAGTTGTCGTTTAGCGTTCTGAAGTGCGATCGTCTCTTAACTCTACTGTCCGTTTTCATGGCACAGGGCTACAATGGGACGCTTCCCCTGTGCATGTGCATTACAGGCTAATAGCATTTCGACCTCGGCGAAGTTGAGGTACCCGTCGAACTGGTCACGTCCAAGACGTTGCACGCACCGACCACGCCAGCGAAATAGAAGCAAGACTCCGTAACTCGCCTCGTCAGACAATC";
		assertEquals(expected, assemble.apply(k, d, pairs));
	}

	@Test
	public void carsonellaRuddii() throws Exception {
		List<String> lines = FileUtil.loadFile("reads.txt");
		String result = assemble.apply(120, 1000, lines);
		System.out.println(result);
	}

	@Test
	public void quiz() {
		List<String> pairs = Arrays.asList("ACC|ATA", "ACT|ATT", "ATA|TGA",
				"ATT|TGA", "CAC|GAT", "CCG|TAC", "CGA|ACT", "CTG|AGC",
				"CTG|TTC", "GAA|CTT", "GAT|CTG", "GAT|CTG", "TAC|GAT",
				"TCT|AAG", "TGA|GCT", "TGA|TCT", "TTC|GAA");
		assertEquals("CACCGATACTGATTCTGAAGCTT", assemble.apply(3, 1, pairs));
	}
}