package coursera.bio;

import static coursera.bio.PatternMatch.approximatePatternCount;
import static coursera.bio.PatternMatch.approximatePositions;
import static coursera.bio.PatternMatch.positions;
import static coursera.bio.Utils.intArrayToString;
import static coursera.bio.Neighbors.neighbors;
import static org.junit.Assert.assertEquals;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import org.junit.Test;

public class PatternMatchTest {

	@Test
	public void positions() {
		String pos = positions.andThen(intArrayToString).apply(
				"GATATATGCATATACTT", "ATAT");
		String expected = Arrays.asList(1, 3, 9).stream()
				.map(i -> i.toString()).collect(Collectors.joining(" "));

		assertEquals(expected, pos);
	}

	@Test
	public void positionsExtraData() throws Exception {
		List<String> lines = FileUtil.loadFile("pattern_matching_data.txt");
		String pos = positions.andThen(intArrayToString).apply(lines.get(2),
				lines.get(1));

		assertEquals(lines.get(4), pos);
	}

	@Test
	public void positionsDataset() throws Exception {
		List<String> lines = FileUtil.loadFile("dataset_3_5.txt");
		String pos = positions.andThen(intArrayToString).apply(lines.get(1),
				lines.get(0));

		assertEquals(
				"0 29 53 169 191 215 255 354 361 429 453 468 501 546 565 592 682 689 696 703 710 754 772 825 910 928 935 977 996 1031 1038 1045 1056 1074 1100 1126 1143 1164 1193 1200 1262 1321 1382 1410 1417 1452 1533 1540 1607 1614 1667 1674 1708 1736 1817 1845 1852 1887 1894 1963 1980 2127 2167 2206 2213 2234 2250 2293 2309 2359 2406 2458 2482 2500 2520 2527 2571 2610 2617 2624 2684 2691 2707 2829 2836 2900 3016 3063 3090 3139 3154 3180 3195 3216 3251 3261 3282 3400 3442 3462 3469 3499 3572 3642 3649 3656 3728 3743 3750 3824 3831 3874 3881 3888 3903 3918 3925 3940 3968 4002 4017 4061 4091 4111 4159 4191 4262 4340 4394 4439 4446 4453 4518 4533 4574 4622 4648 4679 4728 4750 4801 4808 4840 4847 4854 4929 4953 5010 5081 5108 5168 5261 5276 5283 5316 5323 5340 5347 5354 5361 5379 5394 5437 5456 5482 5489 5496 5531 5538 5545 5583 5640 5787 5802 5870 5922 5990 6008 6045 6075 6128 6250 6267 6344 6385 6410 6427 6508 6515 6562 6624 6651 6712 6719 6726 6744 6751 6785 6922 6977 7031 7047 7143 7219 7283 7325 7354 7361 7398 7520 7611 7631 7638 7645 7652 7671 7693 7700 7804 7823 7866 7881 7888 7950 7957 7977 8008",
				pos);
	}

	@Test
	public void positionsVibrioCholerae() throws Exception {
		List<String> lines = FileUtil.loadFile("Vibrio_cholerae.txt");
		String pos = positions.andThen(intArrayToString).apply(lines.get(0),
				"ATGATCAAG");

		assertEquals(
				"116556 149355 151913 152013 152394 186189 194276 200076 224527 307692 479770 610980 653338 679985 768828 878903 985368",
				pos);
	}

	@Test
	public void approximatePositions() {
		String pos = approximatePositions
				.andThen(intArrayToString)
				.apply("CGCCCGAATCCAGAACGCATTCCCATATTTCGGGACCACTGGCCTCCACGGTACGGACGTCAATCAAAT",
						"ATTCTGGA", 3);
		assertEquals("6 7 26 27", pos);
	}

	@Test
	public void approximatePositionsExtraData() throws Exception {
		List<String> lines = FileUtil.loadFile("approximate_match_data.txt");
		String pos = approximatePositions.andThen(intArrayToString).apply(
				lines.get(2), lines.get(1), Integer.parseInt(lines.get(3)));
		assertEquals(lines.get(5), pos);
	}

	@Test
	public void approximatePositionsDataset() throws Exception {
		List<String> lines = FileUtil.loadFile("dataset_9_4.txt");
		String pos = approximatePositions.andThen(intArrayToString).apply(
				lines.get(1), lines.get(0), Integer.parseInt(lines.get(2)));
		assertEquals(
				"85 102 104 106 125 127 139 163 173 224 253 265 276 288 301 303 316 341 356 360 362 370 401 418 450 454 461 463 465 508 527 540 553 555 567 590 609 655 693 803 805 827 857 859 868 881 890 901 917 935 954 966 1009 1011 1050 1060 1087 1105 1131 1140 1172 1254 1256 1285 1294 1296 1313 1380 1381 1408 1473 1519 1523 1530 1557 1559 1598 1600 1628 1630 1655 1662 1669 1736 1753 1755 1757 1762 1775 1793 1876 1896 1900 1904 1941 1945 1949 1997 2004 2014 2093 2102 2131 2152 2163 2181 2202 2226 2228 2243 2258 2262 2275 2277 2299 2305 2319 2321 2418 2431 2441 2469 2471 2487 2507 2547 2574 2599 2606 2610 2631 2640 2647 2714 2732 2781 2786 2800 2807 2843 2877 2919 2924 2947 2965 2976 2985 2989 2991 2993 2998 3065 3067 3086 3090 3097 3138 3154 3161 3179 3191 3211 3226 3256 3258 3373 3386 3398 3405 3413 3415 3417 3436 3449 3451 3458 3481 3485 3513 3520 3553 3566 3568 3575 3583 3645 3673 3694 3717 3767 3771 3783 3791 3793 3825 3855 3869 3884 3886 3900 3938 3968 3985 4009 4034 4108 4117 4124 4139 4223 4273 4347 4393 4423 4576 4578 4587 4592 4611 4627 4780 4796 4859 4865 4874 4881 4897 4908 4925 4935 4942 4949 4956 4979 4983 5000 5007 5009 5014 5053 5073 5112 5127 5154 5163 5174 5208 5217 5257 5335 5395 5397 5437 5469 5493 5600 5627 5654 5658 5667 5684 5709 5811 5830 5843 5845 5847 5849 5858 5868 5872 5891 5903 5905 5907 5944 5948 5976 6000 6084 6126 6154 6185 6199 6205 6215 6235 6243 6245 6278 6293 6308 6339 6354 6402 6436 6438 6442 6468 6499 6503 6522 6558 6580 6612 6617 6619 6623 6648 6656 6711 6723 6753 6776 6796 6800 6820 6830 6849 6876 6888 6894 6910 6912 6941 6950 6952 6971 6973 6975 6989 6997 7038 7058 7060 7106 7108 7110 7114 7151 7184 7191 7196 7216 7278 7297 7304 7315 7317 7352 7386 7393 7415 7425 7427 7463 7515 7551 7579 7583 7603 7605 7644 7711 7739 7763 7781 7795 7872 7874 7892 7899 7947 7949 7967 7983 7985 7991 7993 8026 8028 8030 8040 8044 8046 8058 8089 8091 8111 8153 8165 8189 8208 8267 8271 8275 8296 8309 8311 8372 8385 8392 8402 8410 8414 8421 8471 8512 8563 8574 8600 8607 8642 8650 8659 8685 8717 8736 8755 8757 8768 8789 8797 8799 8861 8869 8886 8938 8974 9010 9032 9063 9105 9112 9114 9140 9147 9149 9171 9173 9185 9196 9203 9204 9215 9233 9248 9252 9265 9284 9286 9358 9360 9370 9379 9415 9426 9428 9472 9505 9507 9515 9522 9543 9545 9553 9580 9630 9632 9654 9667 9669 9685 9713 9721 9729 9731 9746 9766 9808 9810 9818 9820 9843 9852 9854 9858 9877 9903 9916 9929 9933 9945 9953 9962 9964 10022 10046 10073 10081 10104 10134 10154 10167 10224 10233 10278 10280 10294 10333 10348 10379 10425 10437 10451 10469 10483 10487 10540 10550 10558 10572 10580 10587 10591 10593 10603 10628 10649 10661 10676 10706 10710 10729 10732 10770 10772 10806 10813 10820 10822 10883 10885 10900 10964 10971 10991 11022 11058 11118 11120 11170 11177 11196 11212 11241 11251 11267 11273 11275 11288 11302 11345 11347 11354 11379 11394 11410 11412 11414 11425 11447 11454 11471 11478 11526 11573 11612 11636 11649 11657 11678 11689 11691 11731 11733 11750 11762 11787 11818 11859 11872 11874 11895 11941 11943 11956 11959 12011 12015 12023 12052 12100 12127 12132 12163 12218 12220 12273 12285 12301 12326 12336 12406 12408 12410 12426 12438 12442 12458 12473 12480 12484 12512 12562 12603 12605 12644 12676 12683 12750 12757 12767 12795 12814 12816 12825 12837 12886 12953 12968 13003 13007 13018 13024 13034 13102 13110 13131 13149 13198 13200 13204 13229 13231 13241 13280 13291 13319 13384 13388 13428 13430 13448 13452 13457 13459 13461 13470 13482 13536 13564 13592 13700 13707 13709 13711 13758 13768 13788 13790 13803 13825 13846 13870 13880 13927 13967 14005 14062 14122 14126 14142 14144 14157 14189 14224 14269 14278 14327 14336 14352 14385 14401 14415 14442 14444 14489 14534 14574 14587 14601 14647 14654 14687 14700 14704 14716 14718 14741 14817 14851 14866 14917 14924 15016 15027 15079 15090 15092 15100 15116 15123 15127 15190 15199 15238 15241 15245 15273 15280 15291 15358 15360 15429 15433 15443 15467 15469 15511 15597 15599 15606 15618 15660 15662 15685 15687 15784 15786 15791 15826 15832 15850 15863 15886 15888 15911 15913 15920 15928 15930 15932 15969 15987 16033 16049 16060 16067 16074 16099 16101 16112 16131 16168 16192 16226 16230 16249 16251 16255 16299 16301 16325 16337 16407 16409 16428 16470 16472 16474 16485 16487 16495 16499 16552 16554 16563 16576 16598 16624 16643 16647 16664 16676 16709 16724 16738 16775 16781 16795 16816 16828 16862 16913 16961 16963 16970 16980 16990 17021 17049 17068 17098 17112 17149 17169 17171 17173 17222 17230 17240 17242 17284 17304 17321 17345 17355 17365 17367 17393 17410 17412 17427 17457 17468 17485 17534 17550 17552 17557 17564 17566 17568 17592 17644 17646 17665 17675 17690 17702 17724 17726 17736 17748 17776 17806 17810 17819 17860 17868 17870 17906 17921 17943 17945 17958 18012 18040 18072 18074 18084 18086 18097 18132 18140 18159 18165 18178 18188 18222 18226 18248 18328 18378 18407 18452 18464 18518 18558 18631 18633 18656 18658 18672 18674 18681 18699 18722 18724 18731 18759 18761",
				pos);
	}

	@Test
	public void approximatePatternCount() {
		assertEquals(Integer.valueOf(4), approximatePatternCount.apply("AACAAGCTGATAAACATTTAAAGAG", "AAAAA", 1));
		assertEquals(Integer.valueOf(11), approximatePatternCount.apply("AACAAGCTGATAAACATTTAAAGAG", "AAAAA", 2));
		assertEquals(Integer.valueOf(4), approximatePatternCount.apply("TTTAGAGCCTTCAGAGG", "GAGG", 2));
	}

	@Test
	public void approximatePatternCountExtraData() throws Exception {
		List<String> lines = FileUtil.loadFile("ApproximatePattern.txt");
		Integer count = approximatePatternCount.apply(lines.get(1), lines.get(2), Integer.valueOf(lines.get(3)));
		assertEquals(Integer.valueOf(lines.get(5)), count);
	}

	@Test
	public void approximatePatternCountDataset() throws Exception {
		List<String> lines = FileUtil.loadFile("dataset_9_6.txt");
		Integer count = approximatePatternCount.apply(lines.get(0), lines.get(1), Integer.valueOf(lines.get(2)));
		assertEquals(Integer.valueOf(14), count);
	}

	@Test
	public void approximatePatternCountQuiz() {
		System.out.println(approximatePatternCount.apply("TACGCATTACAAAGCACA", "AA", 1));
		System.out.println(neighbors.apply("TAGC", 3).size());
	}
}